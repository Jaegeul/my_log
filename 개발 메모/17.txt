소프트웨어의 구성요소(artifacts, 인공물, 산출물)
-문서
-소스코드
-배포시스템

.산출물들에 대해서 여러사람이 공동으로 작업함
.산출물들은 계속 변화되고, 다른버전을 가진다.

.소프트웨어 형상관리(software configuration management)
 -버전관리의 상위내용
 version control

.여러 사람이 같은 산출물에 대해서 작업하는 것에 대한 충돌 제어
.작업중 이전버전으로 회귀해야 할 수도 있음
.현재버전은 고정시키고 다른버전을 작업하고 싶음
 -develop(개발버전)
 -develop v2
 -production(배포버전)

.소스코드 버전 저장소를 Repository라고 함
.git, 리눅스와 함께 탄생 91년에, 최근에 많이 사용하게 되었음
 -SVN(Subersion): 중압 집중적인 버전 관리 방식
 Git: 분산형 버전 관리 방식

.git: 로컬저장소(local repository), 원격저장소(remote repository)
 -로컬저장소: 개발자의 PC
 -원격저장소: Gitlab(회사프로젝트), Bitbucket(협업도구통합), Github.com(오픈소스)

.working directory: 작업공간, 실제소스코드로 개발하는 곳
.sraging area: 버전관리 저장소에 반영할 코드목록
.local repo: 버전관리 저장소

-----git 명령어 정리
.git init: 로컬 초기화하여 저장소 생성
.git status: 로컬저장소와 소스코드를 비교하여 변동사항을 보여줌
:untracked files - 로컬 저장소와 연결이 안 된 상태
                    - 새로 생성된 파일
.git add 파일목록: 작업중인 소스코드를 스테이징 영역에 올림
 -> git add .(전체파일)
.gitignore에 있는 파일들이나 폴더들은 무시됨

.git commit -m "메시지": 로컬 저장소에 스테이징 영역 목록을 반영
사용자 정보가 등록되지 않은 경우:
 git config --global user.email "tjdtnzlffj@gmail.com"
 git config --global user.name "SungSuu"

.git branch: 작업중인 branch 및 다른 브랜치 목록을 표시
브랜치(branch) - 가지, 버전관리 작업공간을 분할/ 기본은 master 브랜치

.git log: git commit 히스토리를 보는 명령어
.git checkout 커밋id: 작업공간의 소스코드가 이전 커밋으로 돌아감

.git bracnch 브랜치명 커밋id: 이전 커밋으로 새로운 브랜치를 생성함
.git checkout 브랜치명: 해당 브랜치로 작업공간 소스코드가 변경

.git remote add 원격저장소이름 원격저장소주소
: 원격 저장소를 추가
: git remote add origin https://github.com/tjdtnzlffj/react-myworkspace.git
git remote add origin https://github.com/tjdtnzlffj/spring-myworkspace.git
.git remote -v: 원격 저장소 목록을 보여줌
fetch(받아올 곳)
.git push: 로컬 저장소의 버전파일을 원격 저장소로 보내기
ex)git push -u origin mastser -> 최초 원격저장소를 추가했을 때 push할 원격저장소 이름 및 브랜치명을 써줘야함er
    -> u(--set-upstream) 로컬저장소에서 원격 저장소로 업로드 허용

// 일반적인 작업 흐름
.) git add . -> git commit -m "메세지" -> git push

.git pull: 원격저장소에서 버전파일을 받고 작업공간에 소스코드 병합
.git fetch + git merge: 소스코드 충돌이 있을 때는 수동으로 merging을 하고 반영
                            git add . -> git commit -m "메세지" -> git push
[
git clone 주소: 원격 저장소의 정보로 로컬 저장소 생성, 소스코드까지 생성
-> javascript 프로젝트인 경우 npm install로 모듈 설치

fetch
원격 저장소로부터 필요한 파일을 다운 (병합은 따로 해야 함)
지역 브랜치는 원래 가지고 있던 지역 저장소의 최근 커밋 위치를 가리키고, 원격 저장소 origin/master는 가져온 최신 커밋을 가리킨다.
신중할 때 사용한다.
사용하는 이유?
원래 내용과 바뀐 내용과의 차이를 알 수 있다 (git diff HEAD origin/master)
commit이 얼마나 됐는지 알 수 있다 (git log --decorate --all --oneline)
이런 세부 내용 확인 후 git merge origin/master 하면 git pull 상태와 같아진다. (병합까지 완료)
clone은 기존 작업 파일들과 병합하고 fetch는 병합하지 않고 따로 저장됨
pull
원격 저장소로부터 필요한 파일을 다운 + 병합
지역 브랜치와, 원격 저장소 origin/master 가 같은 위치를 가리킨다.

fork
fork는 다른 사람의 Github repository에서 내가 어떤 부분을 수정하거나 추가 기능을 넣고 싶을 때 
해당 respository를 내 Github repository로 그대로 복제하는 기능이다. 